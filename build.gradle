plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
}
apply plugin: "maven-publish"

repositories {
    gradlePluginPortal()
}

architectury {
    minecraft = minecraft_version
}

version = "${mod_version}"

println "Mod version: $version"

@SuppressWarnings('unused')
Object getModDescription() {
    return "${mod_description}"
}

tasks.register('collectJars') {
    dependsOn ":forge:build"
    dependsOn ":fabric:build"
    dependsOn ":common:build"

    doFirst {
        delete fileTree("$buildDir/libs/collected")
        mkdir "$buildDir/libs/collected"
        copy {
            from "$projectDir/common/build/libs/$archivesBaseName-${version}.jar"
            into "$buildDir/libs/collected"
            rename ".*", "$archivesBaseName-common-${version}.jar"
        }
        copy {
            from "$projectDir/forge/build/libs/$archivesBaseName-${version}.jar"
            into "$buildDir/libs/collected"
            rename ".*", "$archivesBaseName-forge-${version}.jar"
        }
        copy {
            from "$projectDir/fabric/build/libs/$archivesBaseName-${version}.jar"
            into "$buildDir/libs/collected"
            rename ".*", "$archivesBaseName-fabric-${version}.jar"
        }
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        mavenCentral()
        google()

        mavenLocal()

        maven {
            name 'Sponge / Mixin'
            url 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            name 'BlameJared Maven (CrT / Bookshelf)'
            url 'https://maven.blamejared.com'
        }
        maven {
            name 'ParchmentMC'
            url 'https://maven.parchmentmc.org'
        }

        maven {
            name 'Quilt (Release)'
            url 'https://maven.quiltmc.org/repository/release/'
        }

        maven {
            name "UBO Maven"
            url "https://github.com/Ultreon/ultreon-data/raw/main/.mvnrepo/"
        }

        maven {
            name "CoreLibs Maven"
            url "https://github.com/Ultreon/corelibs/raw/main/.mvnrepo/"
        }

        maven {
            name 'Jitpack'
            url 'https://jitpack.io/'
        }

        maven {
            name "Cursemaven"
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            name "Fuzs Mod Resources"
            url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
        maven { url "https://maven.architectury.dev/" }
        maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.19.2:2022.08.10@zip")
        }

        compileOnly 'com.google.errorprone:error_prone_annotations:2.16'
    }

    processResources {
        exclude "*.pdn", "*.xcf", "*.bbmodel", "*.bin", "*.rom"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven { url = "https://maven.parchmentmc.org" }

        flatDir {
            dir "${rootProject.projectDir}/libs"
        }
    }

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = "UTF-8"
            options.release.set(17 as Integer)
        }
    }

    java {
        withSourcesJar()
    }
}

afterEvaluate {
    javadoc {
        source(subprojects.collect { subproject ->
            subproject.sourceSets.main.allJava.sourceDirectories
        })
        title = "CoreLibs"
        description = "CoreLibs is the core library collection for Ultreon Team projects."
        setDestinationDir(file("$rootProject.projectDir/build/docs/javadoc"))
        // Configure the classpath
        classpath = files(subprojects.collect { subproject ->
            subproject.sourceSets.main.compileClasspath
        })
        (options as StandardJavadocDocletOptions).links(
                "https://maven.fabricmc.net/docs/fabric-api-$fabric_api_version",
                "https://maven.fabricmc.net/docs/fabric-loader-$fabric_loader_version",
                "https://ultreon.github.io/corelibs/docs/$corelibs_version",
                "https://ultreon.github.io/ultreon-data/docs/$ultreon_data_version",
                "https://jenkins.liteloader.com/view/Other/job/Mixin/javadoc",
        )
    }
}

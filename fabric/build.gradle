plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

version rootProject.version

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases" }
    mavenCentral()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${architectury_version}"

    modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_port_version}"
    modImplementation 'com.electronwill.night-config:core:3.6.5'
    modImplementation 'com.electronwill.night-config:toml:3.6.5'

    include api("io.github.ultreon:ubo:${ultreon_data_version}", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })

    include api("io.github.ultreon.corelibs:collections-v0:$corelibs_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })
    include api("io.github.ultreon.corelibs:commons-v0:$corelibs_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })
    include api("io.github.ultreon.corelibs:crash-v0:$corelibs_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })
    include api("io.github.ultreon.corelibs:datetime-v0:$corelibs_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })
    include api("io.github.ultreon.corelibs:events-v1:$corelibs_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })
    include api("io.github.ultreon.corelibs:functions-v0:$corelibs_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })
    include api("io.github.ultreon.corelibs:registries-v0:$corelibs_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })
    include api("io.github.ultreon.corelibs:resources-v0:$corelibs_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })
    include api("io.github.ultreon.corelibs:text-v0:$corelibs_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })
    include api("io.github.ultreon.corelibs:translations-v0:$corelibs_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })
    include api("com.github.Ultreon:json5-api:$json5_api_version", { exclude group: "com.google.code.gson"; exclude group: "com.google.guava" })

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modImplementation "com.terraformersmc:modmenu:8.0.0", {
        exclude module: "fabric-api"
    }
}

processResources {
    inputs.property "version", rootProject.version

    filesMatching("fabric.mod.json") {
        HashMap<String, ?> p = new HashMap<>()
        p.put("version", rootProject.version)
        p.put("description", rootProject.getModDescription())
        p.put("loaderVersion", rootProject.fabric_loader_version)
        p.put("minecraftVersion", rootProject.architectury.minecraft)
        expand(p)
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    //noinspection GrDeprecatedAPIUsage
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            //noinspection GroovyAssignabilityCheck
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

version rootProject.version

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {

    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.architectury.minecraft}-${forge_version}"
    forgeRuntimeLibrary project(":forge")
    include(project(":forge"))
    include("com.github.Ultreon:ultreon-data:${ultreon_data_version}")

    include("com.github.Ultreon.corelibs:corelibs-collections-v0:$corelibs_version") { transitive false }
    include("com.github.Ultreon.corelibs:corelibs-commons-v0:$corelibs_version") { transitive false }
    include("com.github.Ultreon.corelibs:corelibs-crash-v0:$corelibs_version") { transitive false }
    include("com.github.Ultreon.corelibs:corelibs-datetime-v0:$corelibs_version") { transitive false }
    include("com.github.Ultreon.corelibs:corelibs-events-v1:$corelibs_version") { transitive false }
    include("com.github.Ultreon.corelibs:corelibs-functions-v0:$corelibs_version") { transitive false }
    include("com.github.Ultreon.corelibs:corelibs-registries-v0:$corelibs_version") { transitive false }
    include("com.github.Ultreon.corelibs:corelibs-resources-v0:$corelibs_version") { transitive false }
    include("com.github.Ultreon.corelibs:corelibs-text-v0:$corelibs_version") { transitive false }
    include("com.github.Ultreon.corelibs:corelibs-translations-v0:$corelibs_version") { transitive false }
}

processResources {
    dependsOn ":forge:jar"
}

shadowJar {
    dependsOn ":forge:shadowJar"
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    dependsOn ":forge:remapJar"
    //noinspection GrDeprecatedAPIUsage
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    dependsOn ":forge:jar"
    classifier "dev"
}

sourcesJar {
    dependsOn ":forge:sourcesJar"
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}
